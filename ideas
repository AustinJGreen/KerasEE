#-Switch to 64x64 and network structure similar to simple.py
#-Add minimap as input?
#-Make network that generates backgrounds for worlds, or foregrounds given the opposite
#-Flatten wide worlds into 128x128 or square shape?
#-Create method to auto call tensorboard?
#-In future merge EEDataMiner and this project into one project for github
#-Train with background and minimap rgb values for discriminator
#-Add new method for cecoding compressed data
#-Add method for continuing training
#-Put load world method in utils
#-Finish method in EEDataMiner that auto builds efficient map for all world list based on block frequencies
#-In Future build GUI for this
#-Add methods for auto uploading worlds using python ee library
#-ADd images to tensorboard?
#-Add other tensorboard training data for simple.py
#-Experiment with 128x128 context for simple.py instead of removing action blocks
#-Create method in utils.py for checking directories to simplify code
#-Better way of extracting more data from single world?
#-Add time remaining estimate to load_worlds
#-Stick with foreground for now...
#-Reduce overhead for red blue green color computation inside utils create seperate function for each channel
#-Test to make sure AddMinimapValues is working
#-Reduce learning rate on discriminator to help out generator?
#-Add LeakyRelu to discriminator
#-Add support for .world and .dat files
#-Networks right now are too complicated? (or at least not right with the way outputs are looking)
#-TRy small networks for both discriminator and generator
#-Try generator that outputs 64x64xblocks with each 64x64 layer being a 0-100% probably for that block being there
#-TWo discriminators One that looks at minimap, one that does blocks